name: coverage

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  audit:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run audit
        run: cargo audit

  test:
    name: coverage
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ vars.SQLX_VERSION }}
          --features ${{ vars.SQLX_FEATURES }}
          --no-default-features
          --locked

      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="password" psql -U "postgres" -h "localhost" -c "${GRANT_QUERY}"

      - name: Migrate database
        run: SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Generate code coverage
        run: |
          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true
